{"componentChunkName":"component---src-templates-documentation-page-js","path":"/dev/own-instance/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"creating-your-own-instance-of-crossfeed\" style=\"position:relative;\"><a href=\"#creating-your-own-instance-of-crossfeed\" aria-label=\"creating your own instance of crossfeed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating your own instance of Crossfeed</h2>\n<p>When you create your own instance of Crossfeed, you can customize many aspects of how it looks. The <code class=\"language-text\">dev.env.example</code> file contains a full list of all customizable variables.</p>\n<p>To deploy Crossfeed for the first time in a fresh AWS environment, you need to do a couple of things:</p>\n<ul>\n<li>Set up a custom domain for the frontend and create an ACM certificate for it</li>\n<li>Set up authentication mechanism (Cognito or login.gov) Generate a login.gov RSA key</li>\n<li>Set initial SSM variables</li>\n<li>Configure User Agent and request signing</li>\n<li>Configure other environment variables</li>\n</ul>\n<h3 id=\"set-up-a-custom-domain-for-the-frontend\" style=\"position:relative;\"><a href=\"#set-up-a-custom-domain-for-the-frontend\" aria-label=\"set up a custom domain for the frontend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set up a custom domain for the frontend</h3>\n<p>Pick a custom domain for your frontend and create an <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html\">ACM certificate</a> for your domain. Then, set the <code class=\"language-text\">frontend_domain</code> and <code class=\"language-text\">frontend_cert_arn</code> variables in <code class=\"language-text\">infrastructure/stage.tfvars</code> and <code class=\"language-text\">infrastructure/prod.tfvars</code> accordingly.</p>\n<h3 id=\"set-up-authentication-mechanism-cognito-or-logingov\" style=\"position:relative;\"><a href=\"#set-up-authentication-mechanism-cognito-or-logingov\" aria-label=\"set up authentication mechanism cognito or logingov permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set up authentication mechanism (Cognito or login.gov)</h3>\n<p>Choose between using Cognito or login.gov. login.gov can only be used if you are\na government agency, so you'll most likely just want to use Cognito.</p>\n<h4 id=\"cognito-setup\" style=\"position:relative;\"><a href=\"#cognito-setup\" aria-label=\"cognito setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cognito setup</h4>\n<p>You can perform these Cognito setup steps after the user pools have been created after you first run Terraform (<a href=\"#use-terraform\">mentioned below</a>).</p>\n<p>In <code class=\"language-text\">backend/env.yml</code>, set the following variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">USE_COGNITO: 1\nREACT_APP_USER_POOL_ID: us-east-1_uxiY8DOum</code></pre></div>\n<p>In <code class=\"language-text\">frontend/stage.env</code> / <code class=\"language-text\">frontend/prod.env</code>, make sure the following environment variables are set:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">REACT_APP_USE_COGNITO=1\nREACT_APP_USER_POOL_ID=us-east-1_uxiY8DOum\nREACT_APP_USER_POOL_CLIENT_ID=1qf4cii9v0t9hn1hnr54f2ao0j</code></pre></div>\n<h4 id=\"logingov-setup\" style=\"position:relative;\"><a href=\"#logingov-setup\" aria-label=\"logingov setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>login.gov setup</h4>\n<p>In <code class=\"language-text\">backend/env.yml</code>, <code class=\"language-text\">frontend/stage.env</code>, and <code class=\"language-text\">frontend/prod.env</code>, remove the lines that set the <code class=\"language-text\">USE_COGNITO</code> or <code class=\"language-text\">REACT_APP_USE_COGNITO</code> environment variables. Both variables must be unset for login.gov authentication to be used!</p>\n<p>Run the following to generate a login.gov RSA key (preferably in a non-git directory outside of crossfeed!):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa -out private.pem <span class=\"token number\">2048</span>\nopenssl req -newkey rsa:2048 -nodes -days <span class=\"token number\">3650</span> -out csr.pem\nopenssl x509 -req -in csr.pem -out cert.pem -signkey private.pem\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pem-jwk\npem-jwk private.pem <span class=\"token operator\">></span> private.jwk</code></pre></div>\n<p>Visit <a href=\"https://dashboard.int.identitysandbox.gov/\">the Login.gov sandbox dashboard</a> to create a login.gov application, providing <code class=\"language-text\">cert.pem</code> as the public certificate. Copy the contents of <code class=\"language-text\">private.jwk</code> to use as your <code class=\"language-text\">LOGIN_GOV_JWT_KEY</code>, which is stored in SSM in the next step.</p>\n<h3 id=\"set-initial-ssm-variables\" style=\"position:relative;\"><a href=\"#set-initial-ssm-variables\" aria-label=\"set initial ssm variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set initial SSM variables</h3>\n<p>First, make sure you set the following SSM variables manually through the AWS Console (replace <code class=\"language-text\">staging</code> with <code class=\"language-text\">prod</code> as needed). Make sure these variables are set as \"SecureString\":</p>\n<ul>\n<li><code class=\"language-text\">/crossfeed/staging/DATABASE_USER</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/DATABASE_PASSWORD</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/APP_JWT_SECRET</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/REACT_APP_TERMS_VERSION</code></li>\n</ul>\n<p>Optional variables:</p>\n<ul>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_USER_AGENT</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PUBLIC_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PRIVATE_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/CENSYS_API_ID</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/CENSYS_API_SECRET</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/SHODAN_API_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/HIBP_API_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/SIXGILL_CLIENT_ID</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/SIXGILL_CLIENT_SECRET</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/PE_SHODAN_API_KEYS</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LG_API_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LG_WORKSPACE_NAME</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_REDIRECT_URI</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_BASE_URL</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_JWT_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_ISSUER</code></li>\n</ul>\n<h3 id=\"use-terraform\" style=\"position:relative;\"><a href=\"#use-terraform\" aria-label=\"use terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Terraform</h3>\n<p>Run <code class=\"language-text\">cd infrastructure</code>. Then, create a new bucket on S3 that can be used to store terraform state; make sure the bucket is private, bucket versioning is enabled, and server-side encryption is enabled. Then run <code class=\"language-text\">cp stage.config .env</code> and change the variables in <code class=\"language-text\">.env</code> to use this bucket name.</p>\n<p>Make sure you configure the default AWS profile using <code class=\"language-text\">aws configure</code> , or set the <code class=\"language-text\">AWS_PROFILE</code> environment variable in <code class=\"language-text\">.env</code>.</p>\n<p>You must also <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/slr-es.html#create-slr\">create a service-linked role for Amazon ES</a> (this only needs to be created once per AWS account):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws iam create-service-linked-role --aws-service-name es.amazonaws.com</code></pre></div>\n<p>Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> init\n<span class=\"token function\">make</span> plan\n<span class=\"token function\">make</span> apply</code></pre></div>\n<h3 id=\"configure-user-agent-and-request-signing\" style=\"position:relative;\"><a href=\"#configure-user-agent-and-request-signing\" aria-label=\"configure user agent and request signing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure User Agent and request signing</h3>\n<p>Crossfeed's workers, when performing requets, can optionally send a User Agent identifying the requestor as Crossfeed\nand a <code class=\"language-text\">Signature</code> header to verify that Crossfeed is performing the request.</p>\n<p>To do this, you can set the <code class=\"language-text\">WORKER_USER_AGENT</code>, the <code class=\"language-text\">WORKER_SIGNATURE_PUBLIC_KEY</code>, and the <code class=\"language-text\">WORKER_SIGNATURE_PRIVATE_KEY</code> parameters in your env file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WORKER_USER_AGENT=\"Crossfeed (Test request from Crossfeed Staging Environment, for development use only. For more information, see https://github.com/cisagov/crossfeed)\"\nWORKER_SIGNATURE_PUBLIC_KEY=\"public key, can have newlines\"\nWORKER_SIGNATURE_PRIVATE_KEY=\"private key, can have newlines\"</code></pre></div>\n<p>Note that when deploying Crossfeed to AWS, the worker signature public and private keys should also be set as SSM secrets (such as <code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PUBLIC_KEY</code> and <code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PRIVATE_KEY</code>).</p>\n<h4 id=\"generating-rsa-keys\" style=\"position:relative;\"><a href=\"#generating-rsa-keys\" aria-label=\"generating rsa keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating RSA keys</h4>\n<p>The public and private key values can be generated by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -m PEM -t rsa -f test_key\nssh-keygen -f test_key.pub -m <span class=\"token string\">'PEM'</span> -e <span class=\"token operator\">></span> test_key.pem</code></pre></div>\n<p>The public key is the value of <code class=\"language-text\">test_key.pem</code> and the private key is the value of <code class=\"language-text\">test_key</code>.</p>\n<h4 id=\"verifying-a-request\" style=\"position:relative;\"><a href=\"#verifying-a-request\" aria-label=\"verifying a request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verifying a request</h4>\n<p>One can then verify that requests are coming from Crossfeed by providing you with the following parts of the request:</p>\n<ul>\n<li>Value of the <code class=\"language-text\">Date</code> header</li>\n<li>Value of the <code class=\"language-text\">Signature</code> header</li>\n<li>Request method</li>\n<li>Request URL</li>\n</ul>\n<p>You can call the <code class=\"language-text\">SignRequests.verify_signature</code> method (found in <code class=\"language-text\">backend/worker/mitmproxy_sign_requests.py</code>) to verify a signature with\nthe above four parts of a request. Crossfeed will later have an admin UI that allows admins to run this check directly from the web interface.</p>\n<h3 id=\"configure-other-environment-variables\" style=\"position:relative;\"><a href=\"#configure-other-environment-variables\" aria-label=\"configure other environment variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure other environment variables</h3>\n<p>The full list of configurable environment variables are provided in <code class=\"language-text\">.env</code> (used in local development), <code class=\"language-text\">frontend/stage.env</code>, <code class=\"language-text\">frontend/prod.env</code>, and <code class=\"language-text\">backend/env.yml</code>. Additionally, more settings from the Terraform end are stored in <code class=\"language-text\">infrastructure/stage.tfvars</code> and <code class=\"language-text\">infrastructure/prod.tfvars</code>.</p>","frontmatter":{"title":"","sidenav":null},"fields":{"slug":"/dev/own-instance/"},"headings":[{"value":"Creating your own instance of Crossfeed","depth":2},{"value":"Set up a custom domain for the frontend","depth":3},{"value":"Set up authentication mechanism (Cognito or login.gov)","depth":3},{"value":"Cognito setup","depth":4},{"value":"login.gov setup","depth":4},{"value":"Set initial SSM variables","depth":3},{"value":"Use Terraform","depth":3},{"value":"Configure User Agent and request signing","depth":3},{"value":"Generating RSA keys","depth":4},{"value":"Verifying a request","depth":4},{"value":"Configure other environment variables","depth":3}]}},"pageContext":{"name":"/dev/own-instance/"}},"staticQueryHashes":["1824138477","3841949133","63159454"]}