{"componentChunkName":"component---src-templates-documentation-page-js","path":"/dev/deployment/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"automatic-deployment-of-cisa-crossfeed\" style=\"position:relative;\"><a href=\"#automatic-deployment-of-cisa-crossfeed\" aria-label=\"automatic deployment of cisa crossfeed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automatic deployment of CISA Crossfeed</h3>\n<p>Deployment of CISA Crossfeed is done automatically through GitHub Actions from the <a href=\"https://github.com/cisagov/crossfeed\">cisagov/crossfeed</a> GitHub repository.</p>\n<p>Any code pushed to the <code class=\"language-text\">master</code> branch is automatically deployed to the <a href=\"https://staging.crossfeed.cyber.dhs.gov/\">staging site</a>, and any code pushed to the <code class=\"language-text\">production</code> branch is automatically deployed to the <a href=\"https://crossfeed.cyber.dhs.gov/\">production site</a>.</p>\n<p><a href=\"https://docs.github.com/en/actions/reference/environments\">Environments</a> are configured to ensure that only specific users with the appropriate permissions can trigger workflows on GitHub Actions or access secrets that perform deployments. At the moment, GitHub Actions jobs that deploy to staging and prod or access credentials for those AWS environments must be <a href=\"https://docs.github.com/en/actions/managing-workflow-runs/reviewing-deployments\">manually approved</a>.</p>\n<h4 id=\"setting-up-automatic-deployment\" style=\"position:relative;\"><a href=\"#setting-up-automatic-deployment\" aria-label=\"setting up automatic deployment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up automatic deployment</h4>\n<p>To set up automatic deployment to your own AWS environment, you must first create an IAM user with enough permissions to the right resources on AWS. Then, set the GitHub repository's secrets <code class=\"language-text\">AWS_ACCESS_KEY</code> and <code class=\"language-text\">AWS_SECRET_KEY</code> to the access credentials of this user.</p>\n<h3 id=\"manual-deployment-steps\" style=\"position:relative;\"><a href=\"#manual-deployment-steps\" aria-label=\"manual deployment steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manual deployment steps</h3>\n<p>Here are instructions on how to deploy the different components of Crossfeed manually.</p>\n<h4 id=\"infrastructure\" style=\"position:relative;\"><a href=\"#infrastructure\" aria-label=\"infrastructure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infrastructure</h4>\n<p>Infrastructure is managed by Terraform. To deploy to staging, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> infrastructure\n<span class=\"token function\">make</span> init\n<span class=\"token function\">make</span> plan\n<span class=\"token function\">make</span> apply</code></pre></div>\n<h4 id=\"backend\" style=\"position:relative;\"><a href=\"#backend\" aria-label=\"backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backend</h4>\n<p>The backend API is managed by the Serverless Framework. To deploy, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> backend\nnpx sls create_domain --stage<span class=\"token operator\">=</span>staging\nnpx sls deploy --stage<span class=\"token operator\">=</span>staging</code></pre></div>\n<p>To change the environment variables used to build the backend, edit <code class=\"language-text\">env.yaml</code>. Most of these\nvariables are set through SSM variables (which should be set manually / through Terraform -- see below),\nbut some of these variables are hard-coded and configurable by just editing <code class=\"language-text\">env.yaml</code>.</p>\n<h4 id=\"worker\" style=\"position:relative;\"><a href=\"#worker\" aria-label=\"worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Worker</h4>\n<p>Deploying the worker involves building the Docker image and pushing it to ECR:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> backend\n<span class=\"token function\">npm</span> run deploy-worker</code></pre></div>\n<p>If the <code class=\"language-text\">worker_ecs_repository_url</code> output from Terraform changes, you will need to modify <code class=\"language-text\">./src/tools/deploy-worker.sh</code>.</p>\n<h4 id=\"frontend\" style=\"position:relative;\"><a href=\"#frontend\" aria-label=\"frontend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontend</h4>\n<p>Deploying the frontend involves building the React code, uploading it to an S3 bucket, then invalidating the Cloudfront cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> frontend\n<span class=\"token function\">cp</span> stage.env .env\n<span class=\"token function\">npm</span> run build\naws s3 <span class=\"token function\">sync</span> build/ s3://staging.crossfeed.cyber.dhs.gov --delete</code></pre></div>","frontmatter":{"title":"Deployment","sidenav":"dev"},"fields":{"slug":"/dev/deployment/"},"headings":[{"value":"Automatic deployment of CISA Crossfeed","depth":3},{"value":"Setting up automatic deployment","depth":4},{"value":"Manual deployment steps","depth":3},{"value":"Infrastructure","depth":4},{"value":"Backend","depth":4},{"value":"Worker","depth":4},{"value":"Frontend","depth":4}]}},"pageContext":{"name":"/dev/deployment/"}},"staticQueryHashes":["1824138477","3841949133","63159454"]}